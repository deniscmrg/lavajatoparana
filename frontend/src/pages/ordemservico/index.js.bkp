import React, { useEffect, useState } from 'react';
import './ordemServico.css';
import api from '../../api/axios';
import OrdemServicoForm from './ordemservicoForm';
import CadastroClienteVeiculo from '../cadastroclienteveiculo';
import ModalPlaca from '../buscaplaca';
import FechaOrdemServico from './fechaOrdemServico';
import Paginacao from '../../components/paginacao';
import { CreditCard, Edit, Trash2 } from 'lucide-react';

function OrdensServico() {
  const [ordens, setOrdens] = useState([]);
  const [filtro, setFiltro] = useState('');
  const [formAberto, setFormAberto] = useState(false);
  const [cadastroAberto, setCadastroAberto] = useState(false);
  const [fecharAberto, setFecharAberto] = useState(false);
  const [ordemParaEditar, setOrdemParaEditar] = useState(null);
  const [ordemParaFechar, setOrdemParaFechar] = useState(null);
  const [ordenarPor, setOrdenarPor] = useState('data');
  const [ordemCrescente, setOrdemCrescente] = useState(false);
  const [modalPlacaAberto, setModalPlacaAberto] = useState(false);
  const [placaBusca, setPlacaBusca] = useState('');
  const [filtroData, setFiltroData] = useState('hoje');
  const [filtroStatus, setFiltroStatus] = useState('todos');
  const [dataInicio, setDataInicio] = useState('');
  const [dataFim, setDataFim] = useState('');

 
  const usuario = JSON.parse(localStorage.getItem('usuario')) || {};

  // Pagina√ß√£o frontend
  const [paginaAtual, setPaginaAtual] = useState(1);
  const ordensPorPagina = 11;

  const carregarOrdens = async () => {
    try {
      const res = await api.get('/ordens-servico/');
      setOrdens(Array.isArray(res.data) ? res.data : []); // <- sem results
      setPaginaAtual(1);
    } catch (err) {
      console.error(err);
      alert('Erro ao carregar ordens de servi√ßo.');
    }
  };

  useEffect(() => { carregarOrdens(); }, []);

  const handleConfirmPlaca = (placa) => {
    setPlacaBusca(placa);
    setModalPlacaAberto(false);
    buscarPlaca(placa);
  };

  const buscarPlaca = async (placa) => {
    try {
      const res = await api.get(`/veiculos/${placa}/`);
      const veiculo = res.data;
      const clienteRes = await api.get(`/clientes/${veiculo.cliente}/`);

      setOrdemParaEditar({
        placa: veiculo.placa,
        marca: veiculo.marca,
        modelo: veiculo.modelo,
        cliente_nome: clienteRes.data.nome,
        cliente_celular: clienteRes.data.celular,
        cliente_email: clienteRes.data.email,
        cliente_tipo: clienteRes.data.tipo,
        veiculo_id: veiculo.id,
        cliente_id: clienteRes.data.id,
      });
      setFormAberto(true);
    } catch (err) {
      if (err.response?.status === 404) setCadastroAberto(true);
      else alert('Erro ao buscar ve√≠culo.');
    }
  };

  const abrirForm = (os = null) => { setOrdemParaEditar(os); setFormAberto(true); };
  const abrirFechamento = async (os) => {
    try {
      const resServicos = await api.get(`/servicos-da-os/${os.id}/`);
      const valorTotal = resServicos.data.reduce((acc, s) => acc + Number(s.valor), 0);
      setOrdemParaFechar({ ...os, total: valorTotal });
      setFecharAberto(true);
    } catch { alert('Erro ao buscar os servi√ßos da OS.'); }
  };

  const fecharOrdem = async (formaPagamento) => {
    if (!ordemParaFechar) return;
    if (formaPagamento.toLowerCase() === 'faturar' && ordemParaFechar?.cliente?.tipo !== 'lojista') {
      alert('Somente clientes lojistas podem usar a op√ß√£o Faturar.');
      return;
    }
    try {
      const dataFechamento = new Date().toISOString();
      const dataCaixa = dataFechamento.split('T')[0];

      await api.put(`/ordens-servico/${ordemParaFechar.id}/`, {
        status: 'finalizada',
        forma_pagamento: formaPagamento,
        data_fechamento: dataFechamento
      });

      const resServicos = await api.get(`/servicos-da-os/${ordemParaFechar.id}/`);
      const valorTotal = resServicos.data.reduce((acc, s) => acc + Number(s.valor), 0);

      if (formaPagamento.toLowerCase() !== 'faturar') {
        await api.post('/caixa/', {
          data: dataCaixa,
          tipo: 'entrada',
          origem: `OS #${ordemParaFechar.id}`,
          descricao: `${ordemParaFechar.veiculo?.placa || ''} ${ordemParaFechar.cliente?.nome || ''}`,
          categoria: 'servi√ßos',
          valor: valorTotal,
          forma_pagamento: formaPagamento
        });
      }

      setFecharAberto(false);
      setOrdemParaFechar(null);
      carregarOrdens();
    } catch { alert('Erro ao fechar a ordem de servi√ßo.'); }
  };

  const excluirOrdem = async (id) => {
    if (!window.confirm('Deseja realmente excluir esta ordem de servi√ßo?')) return;
    try { await api.delete(`/ordens-servico/${id}/`); carregarOrdens(); }
    catch { alert('Erro ao excluir a OS.'); }
  };

  const toggleOrdenacao = (coluna) => {
    if (ordenarPor === coluna) setOrdemCrescente(!ordemCrescente);
    else { setOrdenarPor(coluna); setOrdemCrescente(true); }
  };

  // üü¢ FILTRO + ORDENA√á√ÉO
  const ordensFiltradas = [...ordens]
    .filter(os => {
      const nomeOuPlaca = (os.cliente?.nome?.toLowerCase() || '') + (os.veiculo?.placa?.toLowerCase() || '');
      if (!nomeOuPlaca.includes(filtro.toLowerCase())) return false;

      const dataEntrada = new Date(os.data);
      const hoje = new Date();
      const inicioSemana = new Date(); inicioSemana.setDate(hoje.getDate() - hoje.getDay() + 1);
      const inicioMes = new Date(hoje.getFullYear(), hoje.getMonth(), 1);

      if (filtroData === 'hoje' && dataEntrada.toDateString() !== hoje.toDateString()) return false;
      if (filtroData === 'semana' && dataEntrada < inicioSemana) return false;
      if (filtroData === 'mes' && dataEntrada < inicioMes) return false;
      if (filtroData === 'personalizado') {
        const ini = dataInicio ? new Date(dataInicio) : null;
        const fim = dataFim ? new Date(dataFim) : null;
        const apenasData = d => new Date(d.getFullYear(), d.getMonth(), d.getDate());
        const dataEntradaAjustada = apenasData(dataEntrada);
        if ((ini && dataEntradaAjustada < apenasData(ini)) || (fim && dataEntradaAjustada > apenasData(fim))) return false;
      }

      if (filtroStatus !== 'todos' && os.status !== filtroStatus) return false;
      return true;
    })
    .sort((a, b) => {
      const aVal = a[ordenarPor]?.toString().toLowerCase?.() || '';
      const bVal = b[ordenarPor]?.toString().toLowerCase?.() || '';
      if (aVal < bVal) return ordemCrescente ? -1 : 1;
      if (aVal > bVal) return ordemCrescente ? 1 : -1;
      return 0;
    });

  // üü¢ PAGINA√á√ÉO FRONTEND
  const indexUltimo = paginaAtual * ordensPorPagina;
  const indexPrimeiro = indexUltimo - ordensPorPagina;
  const ordensNaPagina = ordensFiltradas.slice(indexPrimeiro, indexUltimo);
  const totalPaginas = Math.ceil(ordensFiltradas.length / ordensPorPagina);

  const iconeOrdenacao = coluna => (ordenarPor === coluna ? (ordemCrescente ? '‚Üë' : '‚Üì') : '');
  const formatarDataHora = data => {
    const dt = new Date(data);
    return `${dt.toLocaleDateString('pt-BR')}, ${dt.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' })}`;
  };

  return (
    <div className="pagina-listagem">
      <div className="cabecalho">
        <h2>Ordens de Servi√ßo</h2>
        <button className="btn btn-primary" onClick={() => setModalPlacaAberto(true)}>+ Nova OS</button>
      </div>

      <div className="filtros-avancados">
        <input
          className="input-filtro-os"
          placeholder="Filtrar por cliente ou placa..."
          value={filtro}
          onChange={e => setFiltro(e.target.value)}
        />
        <div className="filtros-data">
          <strong>Data: </strong>
          <div className="botoes-data">
            {['hoje','semana','mes','todos','personalizado'].map(item => (
              <button key={item} onClick={() => setFiltroData(item)} className={filtroData===item?'ativo':''}>
                {item.charAt(0).toUpperCase()+item.slice(1)}
              </button>
            ))}
          </div>
          {filtroData==='personalizado' && (
            <div className="filtro-datas-personalizadas-os">
              <label>In√≠cio: </label>
              <input type="date" value={dataInicio} onChange={e=>setDataInicio(e.target.value)} />
              <label>Fim: </label>
              <input type="date" value={dataFim} onChange={e=>setDataFim(e.target.value)} />
            </div>
          )}
        </div>
        <div className="filtros-status">
          <strong>Status: </strong>
          {['aberta','finalizada','todos'].map(item=>(
            <button key={item} onClick={()=>setFiltroStatus(item)} className={filtroStatus===item?'ativo':''}>
              {item.charAt(0).toUpperCase()+item.slice(1)}
            </button>
          ))}
        </div>
      </div>

      <div className='tabela-scroll'>
        <table className='tabela'>
          <thead>
            <tr>
              {['id','data','cliente','placa','status','forma_pagamento'].map(col=>(
                <th key={col} onClick={()=>toggleOrdenacao(col)} style={{cursor:'pointer'}}>
                  {col.toUpperCase()} {iconeOrdenacao(col)}
                </th>
              ))}
              <th>Saida</th>
              <th>A√ß√µes</th>
            </tr>
          </thead>
          <tbody>
            {ordensNaPagina.map(os=>(
              <tr key={os.id}>
                <td>{os.id}</td>
                <td>{formatarDataHora(os.data)}</td>
                <td>{os.cliente?.nome||''}</td>
                <td>{os.veiculo?.placa||''}</td>
                <td>{os.status}</td>
                <td>{os.forma_pagamento}</td>
                <td>{os.data_fechamento?formatarDataHora(os.data_fechamento):''}</td>
                <td>
                  <button className="icon-button editar" onClick={()=>abrirForm(os)} title="Editar">
                    <Edit size={18} />
                  </button>
                  <button className="icon-button excluir" onClick={()=>excluirOrdem(os.id)} title="Excluir" disabled={usuario.tipo==='operador'}>
                    <Trash2 size={18} />
                  </button>
                  <button className={`icon-button fechar ${os.status==='finalizada'?'desativado':''}`} onClick={()=>abrirFechamento(os)} title="Fechar" disabled={os.status==='finalizada'}>
                    <CreditCard size={18} />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <Paginacao paginaAtual={paginaAtual} totalPaginas={totalPaginas} onPageChange={setPaginaAtual} />

      <ModalPlaca isOpen={modalPlacaAberto} onClose={()=>setModalPlacaAberto(false)} onConfirm={handleConfirmPlaca} />

      {formAberto && <OrdemServicoForm editData={ordemParaEditar} onClose={()=>{setFormAberto(false); setOrdemParaEditar(null); carregarOrdens();}} atualizarOrdens={carregarOrdens} />}

      {fecharAberto && <FechaOrdemServico ordem={ordemParaFechar} onClose={()=>{setFecharAberto(false); setOrdemParaFechar(null); carregarOrdens();}} onConfirm={fecharOrdem} />}

      {cadastroAberto && <CadastroClienteVeiculo placa={placaBusca} onClose={()=>setCadastroAberto(false)} onConfirm={dados=>{setOrdemParaEditar(dados); setCadastroAberto(false); setFormAberto(true);}} />}
    </div>
  );
}

export default OrdensServico;

